// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
Object {
  "Outputs": Object {
    "distribution": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "SiteCloudfrontDistribution0794B6B8",
          "DomainName",
        ],
      },
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIEndpoint122D8B11": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIDeploymentStageprodBB1CD642",
            },
            "/",
          ],
        ],
      },
    },
    "siteBucket": Object {
      "Value": Object {
        "Ref": "SitewebsiteBucketBC20A569",
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": Object {
      "DependsOn": Array [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client(\\"s3\\")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

CONFIGURATION_TYPES = [\\"TopicConfigurations\\", \\"QueueConfigurations\\", \\"LambdaFunctionConfigurations\\"]

def handler(event: dict, context):
  response_status = \\"SUCCESS\\"
  error_message = \\"\\"
  try:
    props = event[\\"ResourceProperties\\"]
    bucket = props[\\"BucketName\\"]
    notification_configuration = props[\\"NotificationConfiguration\\"]
    request_type = event[\\"RequestType\\"]
    managed = props.get('Managed', 'true').lower() == 'true'
    stack_id = event['StackId']

    if managed:
      config = handle_managed(request_type, notification_configuration)
    else:
      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

    put_bucket_notification_configuration(bucket, config)
  except Exception as e:
    logging.exception(\\"Failed to put bucket notification configuration\\")
    response_status = \\"FAILED\\"
    error_message = f\\"Error: {str(e)}. \\"
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
  external_notifications = find_external_notifications(bucket, stack_id)

  if request_type == 'Delete':
    return external_notifications

  def with_id(notification):
    notification['Id'] = f\\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\\"
    return notification

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def find_external_notifications(bucket, stack_id):
  existing_notifications = get_bucket_notification_configuration(bucket)
  external_notifications = {}
  for t in CONFIGURATION_TYPES:
    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\\"{stack_id}-\\")]

  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  return external_notifications

def get_bucket_notification_configuration(bucket):
  return s3.get_bucket_notification_configuration(Bucket=bucket)

def put_bucket_notification_configuration(bucket, notification_configuration):
  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      \\"Status\\": response_status,
      \\"Reason\\": f\\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\\",
      \\"PhysicalResourceId\\": event.get(\\"PhysicalResourceId\\") or event[\\"LogicalResourceId\\"],
      \\"StackId\\": event[\\"StackId\\"],
      \\"RequestId\\": event[\\"RequestId\\"],
      \\"LogicalResourceId\\": event[\\"LogicalResourceId\\"],
      \\"NoEcho\\": False,
    }
  ).encode(\\"utf-8\\")
  headers = {\\"content-type\\": \\"\\", \\"content-length\\": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event[\\"ResponseURL\\"], headers=headers, data=response_body, method=\\"PUT\\")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode(\\"utf-8\\"))
    print(\\"Status code: \\" + response.reason)
  except Exception as e:
      print(\\"send(..) failed executing request.urlopen(..): \\" + str(e))
",
        },
        "Description": "AWS CloudFormation handler for \\"Custom::S3BucketNotifications\\" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.7",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": Array [
          Object {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CognitoCognitoDefaultAuthenticatedRole162BCBED": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": Object {
                "ForAnyValue:StringLike": Object {
                  "cognito-identity.amazonaws.com:amr": "authenticated",
                },
                "StringEquals": Object {
                  "cognito-identity.amazonaws.com:aud": Object {
                    "Ref": "CognitocognitoIdentityPool626065C7",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Federated": "cognito-identity.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "CognitoCognitoDefaultAuthenticatedRoleDefaultPolicyE55F5536": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "mobileanalytics:PutEvents",
                "cognito-sync:*",
                "cognito-identity:*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "s3:*",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "mediapipelineconcatBucketEB1E86A2",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "mediapipelineconcatBucketEB1E86A2",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CognitoCognitoDefaultAuthenticatedRoleDefaultPolicyE55F5536",
        "Roles": Array [
          Object {
            "Ref": "CognitoCognitoDefaultAuthenticatedRole162BCBED",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CognitoCognitoDefaultUnauthenticatedRole7E1472DA": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": Object {
                "ForAnyValue:StringLike": Object {
                  "cognito-identity.amazonaws.com:amr": "unauthenticated",
                },
                "StringEquals": Object {
                  "cognito-identity.amazonaws.com:aud": Object {
                    "Ref": "CognitocognitoIdentityPool626065C7",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Federated": "cognito-identity.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "CognitoCognitoDefaultUnauthenticatedRoleDefaultPolicyC106F210": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "mobileanalytics:PutEvents",
                "cognito-sync:*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CognitoCognitoDefaultUnauthenticatedRoleDefaultPolicyC106F210",
        "Roles": Array [
          Object {
            "Ref": "CognitoCognitoDefaultUnauthenticatedRole7E1472DA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CognitoDefaultValid0F579DDB": Object {
      "Properties": Object {
        "IdentityPoolId": Object {
          "Ref": "CognitocognitoIdentityPool626065C7",
        },
        "Roles": Object {
          "authenticated": Object {
            "Fn::GetAtt": Array [
              "CognitoCognitoDefaultAuthenticatedRole162BCBED",
              "Arn",
            ],
          },
          "unauthenticated": Object {
            "Fn::GetAtt": Array [
              "CognitoCognitoDefaultUnauthenticatedRole7E1472DA",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
    },
    "CognitoUserPool279BBD48": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AccountRecoverySetting": Object {
          "RecoveryMechanisms": Array [
            Object {
              "Name": "verified_email",
              "Priority": 1,
            },
          ],
        },
        "AdminCreateUserConfig": Object {
          "AllowAdminCreateUserOnly": false,
          "InviteMessageTemplate": Object {
            "EmailMessage": "Your Click-To-Call web app username is {username} and temporary password is {####}",
            "EmailSubject": "Your Click-To-Call web app temporary password",
          },
        },
        "AutoVerifiedAttributes": Array [
          "email",
        ],
        "EmailVerificationMessage": "The verification code to your new Click-To-Call web app account is {####}",
        "EmailVerificationSubject": "Verify your new Click-To-Call web app account",
        "EnabledMfas": Array [
          "SMS_MFA",
          "SOFTWARE_TOKEN_MFA",
        ],
        "LambdaConfig": Object {
          "PreSignUp": Object {
            "Fn::GetAtt": Array [
              "CognitodomainValidatorC88C5FF9",
              "Arn",
            ],
          },
        },
        "MfaConfiguration": "OPTIONAL",
        "Schema": Array [
          Object {
            "Mutable": true,
            "Name": "email",
            "Required": true,
          },
        ],
        "SmsConfiguration": Object {
          "ExternalId": "testCognitoUserPoolA55211EF",
          "SnsCallerArn": Object {
            "Fn::GetAtt": Array [
              "CognitoUserPoolsmsRole738960F0",
              "Arn",
            ],
          },
        },
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UsernameAttributes": Array [
          "email",
        ],
        "VerificationMessageTemplate": Object {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new Click-To-Call web app account is {####}",
          "EmailSubject": "Verify your new Click-To-Call web app account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Delete",
    },
    "CognitoUserPoolClientEF2538C4": Object {
      "Properties": Object {
        "AllowedOAuthFlows": Array [
          "implicit",
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": Array [
          "profile",
          "phone",
          "email",
          "openid",
          "aws.cognito.signin.user.admin",
        ],
        "CallbackURLs": Array [
          "https://example.com",
        ],
        "ExplicitAuthFlows": Array [
          "ALLOW_CUSTOM_AUTH",
          "ALLOW_USER_SRP_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH",
        ],
        "GenerateSecret": false,
        "RefreshTokenValidity": 60,
        "SupportedIdentityProviders": Array [
          "COGNITO",
        ],
        "TokenValidityUnits": Object {
          "RefreshToken": "minutes",
        },
        "UserPoolId": Object {
          "Ref": "CognitoUserPool279BBD48",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "CognitoUserPoolPreSignUpCognitoD07EA58F": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "CognitodomainValidatorC88C5FF9",
            "Arn",
          ],
        },
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "CognitoUserPool279BBD48",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "CognitoUserPoolsmsRole738960F0": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Condition": Object {
                "StringEquals": Object {
                  "sts:ExternalId": "testCognitoUserPoolA55211EF",
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "cognito-idp.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": "sns:Publish",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "sns-publish",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CognitocognitoIdentityPool626065C7": Object {
      "Properties": Object {
        "AllowUnauthenticatedIdentities": false,
        "CognitoIdentityProviders": Array [
          Object {
            "ClientId": Object {
              "Ref": "CognitoUserPoolClientEF2538C4",
            },
            "ProviderName": Object {
              "Fn::GetAtt": Array [
                "CognitoUserPool279BBD48",
                "ProviderName",
              ],
            },
          },
        ],
        "IdentityPoolName": "cognitoIdentityPool",
      },
      "Type": "AWS::Cognito::IdentityPool",
    },
    "CognitodomainValidatorC88C5FF9": Object {
      "DependsOn": Array [
        "CognitodomainValidatorServiceRole1B8A3BD4",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "39a95a21ff1981283a30ebc303dbee721493ff20f66c6bcbacc43b84f58f2a0d.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "CognitodomainValidatorServiceRole1B8A3BD4",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CognitodomainValidatorServiceRole1B8A3BD4": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": Object {
      "DependsOn": Array [
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "2bc265c5e0569aeb24a6349c15bd54e76e845892376515e036627ab0cc70bb64.zip",
        },
        "Handler": "index.handler",
        "Layers": Array [
          Object {
            "Ref": "SiteDeployBucketAwsCliLayerB1A3335C",
          },
        ],
        "Role": Object {
          "Fn::GetAtt": Array [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SitewebsiteBucketBC20A569",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SitewebsiteBucketBC20A569",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "cloudfront:GetInvalidation",
                "cloudfront:CreateInvalidation",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "Roles": Array [
          Object {
            "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": Object {
      "DependsOn": Array [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "3f51abb709b8e65167a45aeed02bab11540603d909005d7148230ba5ce6c74d7.zip",
        },
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              "Lambda function for auto-deleting objects in ",
              Object {
                "Ref": "mediapipelinecaptureBucket5A07E855",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "__entrypoint__.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SiteCloudfrontDistribution0794B6B8": Object {
      "Properties": Object {
        "DistributionConfig": Object {
          "CustomErrorResponses": Array [
            Object {
              "ErrorCode": 404,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html",
            },
            Object {
              "ErrorCode": 403,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html",
            },
          ],
          "DefaultCacheBehavior": Object {
            "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
            "Compress": true,
            "TargetOriginId": "testSiteCloudfrontDistributionOrigin14F75D719",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "DefaultRootObject": "index.html",
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Logging": Object {
            "Bucket": Object {
              "Fn::GetAtt": Array [
                "SiteCloudfrontDistributionLoggingBucket0054AC66",
                "RegionalDomainName",
              ],
            },
          },
          "Origins": Array [
            Object {
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "SitewebsiteBucketBC20A569",
                  "RegionalDomainName",
                ],
              },
              "Id": "testSiteCloudfrontDistributionOrigin14F75D719",
              "S3OriginConfig": Object {
                "OriginAccessIdentity": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "origin-access-identity/cloudfront/",
                      Object {
                        "Ref": "SiteCloudfrontDistributionOrigin1S3Origin4F2AB6D1",
                      },
                    ],
                  ],
                },
              },
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "SiteCloudfrontDistributionLoggingBucket0054AC66": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "SiteCloudfrontDistributionOrigin1S3Origin4F2AB6D1": Object {
      "Properties": Object {
        "CloudFrontOriginAccessIdentityConfig": Object {
          "Comment": "Identity for testSiteCloudfrontDistributionOrigin14F75D719",
        },
      },
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
    },
    "SiteDeployBucketAwsCliLayerB1A3335C": Object {
      "Properties": Object {
        "Content": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "5d8d1d0aacea23824c62f362e1e3c14b7dd14a31c71b53bfae4d14a6373c5510.zip",
        },
        "Description": "/opt/awscli/aws",
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "SiteDeployBucketCustomResource08EC962A": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "DestinationBucketName": Object {
          "Ref": "SitewebsiteBucketBC20A569",
        },
        "DistributionId": Object {
          "Ref": "SiteCloudfrontDistribution0794B6B8",
        },
        "DistributionPaths": Array [
          "/*",
        ],
        "Prune": true,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
            "Arn",
          ],
        },
        "SourceBucketNames": Array [
          Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
        ],
        "SourceMarkers": Array [
          Object {},
          Object {
            "<<marker:0xbaba:0>>": Object {
              "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
            },
            "<<marker:0xbaba:1>>": Object {
              "Ref": "AWS::Region",
            },
            "<<marker:0xbaba:2>>": Object {
              "Ref": "AWS::URLSuffix",
            },
            "<<marker:0xbaba:3>>": Object {
              "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIDeploymentStageprodBB1CD642",
            },
            "<<marker:0xbaba:4>>": Object {
              "Ref": "mediapipelineconcatBucketEB1E86A2",
            },
            "<<marker:0xbaba:5>>": Object {
              "Ref": "AWS::Region",
            },
            "<<marker:0xbaba:6>>": Object {
              "Ref": "CognitoUserPool279BBD48",
            },
            "<<marker:0xbaba:7>>": Object {
              "Ref": "CognitoUserPoolClientEF2538C4",
            },
            "<<marker:0xbaba:8>>": Object {
              "Ref": "CognitocognitoIdentityPool626065C7",
            },
          },
        ],
        "SourceObjectKeys": Array [
          "8bff4fe939504132047962b145842837ffa71e7cc2a892dddb8718665a59c5d3.zip",
          "5c89cc96a4737b5653e6e4eabef1c7f3e73bbb6884d41e4d857b951a20ec618a.zip",
        ],
      },
      "Type": "Custom::CDKBucketDeployment",
      "UpdateReplacePolicy": "Delete",
    },
    "SitewebsiteBucketAutoDeleteObjectsCustomResourceB62EAF63": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "SitewebsiteBucketPolicyC20F0243",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "SitewebsiteBucketBC20A569",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "SitewebsiteBucketBC20A569": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
          Object {
            "Key": "aws-cdk:cr-owned:7d2ce709",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "SitewebsiteBucketPolicyC20F0243": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "SitewebsiteBucketBC20A569",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "SitewebsiteBucketBC20A569",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "SitewebsiteBucketBC20A569",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": Object {
                "CanonicalUser": Object {
                  "Fn::GetAtt": Array [
                    "SiteCloudfrontDistributionOrigin1S3Origin4F2AB6D1",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "SitewebsiteBucketBC20A569",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIAccountE3EFECFA": Object {
      "DeletionPolicy": "Retain",
      "DependsOn": Array [
        "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
      ],
      "Properties": Object {
        "CloudWatchRoleArn": Object {
          "Fn::GetAtt": Array [
            "infrastructureChimeSDKMeetingWithTranscribeAPICloudWatchRoleD72926DA",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3": Object {
      "Properties": Object {
        "EndpointConfiguration": Object {
          "Types": Array [
            "REGIONAL",
          ],
        },
        "Name": "ChimeSDKMeetingWithTranscribeAPI",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPICloudWatchRoleD72926DA": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIDeployment7912FE319ce984d698234cb1bcfde4598633c73e": Object {
      "DependsOn": Array [
        "infrastructureChimeSDKMeetingWithTranscribeAPIendOPTIONS2ED1B77B",
        "infrastructureChimeSDKMeetingWithTranscribeAPIendPOST5C3E6274",
        "infrastructureChimeSDKMeetingWithTranscribeAPIend62B7E30B",
        "infrastructureChimeSDKMeetingWithTranscribeAPImeetingOPTIONS2166E958",
        "infrastructureChimeSDKMeetingWithTranscribeAPImeetingPOSTFBD92F19",
        "infrastructureChimeSDKMeetingWithTranscribeAPImeetingBA6A7F65",
        "infrastructureChimeSDKMeetingWithTranscribeAPIOPTIONS8C0928BA",
        "infrastructureChimeSDKMeetingWithTranscribeAPIrecordingsOPTIONSACBEAD21",
        "infrastructureChimeSDKMeetingWithTranscribeAPIrecordingsPOST5946F098",
        "infrastructureChimeSDKMeetingWithTranscribeAPIrecordings37011E83",
      ],
      "Properties": Object {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIDeploymentStageprodBB1CD642": Object {
      "DependsOn": Array [
        "infrastructureChimeSDKMeetingWithTranscribeAPIAccountE3EFECFA",
      ],
      "Properties": Object {
        "DeploymentId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIDeployment7912FE319ce984d698234cb1bcfde4598633c73e",
        },
        "MethodSettings": Array [
          Object {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIOPTIONS8C0928BA": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Fn::GetAtt": Array [
            "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
            "RootResourceId",
          ],
        },
        "RestApiId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIend62B7E30B": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
            "RootResourceId",
          ],
        },
        "PathPart": "end",
        "RestApiId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIendOPTIONS2ED1B77B": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIend62B7E30B",
        },
        "RestApiId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIendPOST5C3E6274": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "infrastructuremeetingLambda262F5C95",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIend62B7E30B",
        },
        "RestApiId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIendPOSTApiPermissionTesttestinfrastructureChimeSDKMeetingWithTranscribeAPI101ABD51POSTend367F3273": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "infrastructuremeetingLambda262F5C95",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
              },
              "/test-invoke-stage/POST/end",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIendPOSTApiPermissiontestinfrastructureChimeSDKMeetingWithTranscribeAPI101ABD51POSTend75D499F6": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "infrastructuremeetingLambda262F5C95",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
              },
              "/",
              Object {
                "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIDeploymentStageprodBB1CD642",
              },
              "/POST/end",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPImeetingBA6A7F65": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
            "RootResourceId",
          ],
        },
        "PathPart": "meeting",
        "RestApiId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPImeetingOPTIONS2166E958": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPImeetingBA6A7F65",
        },
        "RestApiId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPImeetingPOSTApiPermissionTesttestinfrastructureChimeSDKMeetingWithTranscribeAPI101ABD51POSTmeeting6AC9838F": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "infrastructuremeetingLambda262F5C95",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
              },
              "/test-invoke-stage/POST/meeting",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPImeetingPOSTApiPermissiontestinfrastructureChimeSDKMeetingWithTranscribeAPI101ABD51POSTmeeting09B593EE": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "infrastructuremeetingLambda262F5C95",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
              },
              "/",
              Object {
                "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIDeploymentStageprodBB1CD642",
              },
              "/POST/meeting",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPImeetingPOSTFBD92F19": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "infrastructuremeetingLambda262F5C95",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPImeetingBA6A7F65",
        },
        "RestApiId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIrecordings37011E83": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
            "RootResourceId",
          ],
        },
        "PathPart": "recordings",
        "RestApiId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIrecordingsOPTIONSACBEAD21": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIrecordings37011E83",
        },
        "RestApiId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIrecordingsPOST5946F098": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "infrastructuremeetingLambda262F5C95",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIrecordings37011E83",
        },
        "RestApiId": Object {
          "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIrecordingsPOSTApiPermissionTesttestinfrastructureChimeSDKMeetingWithTranscribeAPI101ABD51POSTrecordings68CE165F": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "infrastructuremeetingLambda262F5C95",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
              },
              "/test-invoke-stage/POST/recordings",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "infrastructureChimeSDKMeetingWithTranscribeAPIrecordingsPOSTApiPermissiontestinfrastructureChimeSDKMeetingWithTranscribeAPI101ABD51POSTrecordings3AD56355": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "infrastructuremeetingLambda262F5C95",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIC18D26D3",
              },
              "/",
              Object {
                "Ref": "infrastructureChimeSDKMeetingWithTranscribeAPIDeploymentStageprodBB1CD642",
              },
              "/POST/recordings",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "infrastructureTranscriptionSLR252BCE69": Object {
      "Properties": Object {
        "AWSServiceName": "transcription.chime.amazonaws.com",
      },
      "Type": "AWS::IAM::ServiceLinkedRole",
    },
    "infrastructureinfrastructureRole7CDA6EE1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": "chime:*",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "chimePolicy",
          },
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": "transcribe:*",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "transcribePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "infrastructureinfrastructureRoleDefaultPolicy8A8149BB": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "infrastructuremeetings3685B870",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "mediapipelinemeetingsC35DE9B1",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "mediapipelineconcatBucketEB1E86A2",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "mediapipelineconcatBucketEB1E86A2",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "mediapipelinecaptureBucket5A07E855",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "mediapipelinecaptureBucket5A07E855",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "infrastructureinfrastructureRoleDefaultPolicy8A8149BB",
        "Roles": Array [
          Object {
            "Ref": "infrastructureinfrastructureRole7CDA6EE1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "infrastructuremeetingLambda262F5C95": Object {
      "DependsOn": Array [
        "infrastructureinfrastructureRoleDefaultPolicy8A8149BB",
        "infrastructureinfrastructureRole7CDA6EE1",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "36a759502f6fc9073f0433fc75354198461abada99e4fe8751f86ff854b9be29.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_ACCOUNT_ID": Object {
              "Ref": "AWS::AccountId",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "CAPTURE_BUCKET_ARN": Object {
              "Fn::GetAtt": Array [
                "mediapipelinecaptureBucket5A07E855",
                "Arn",
              ],
            },
            "CONCAT_BUCKET_ARN": Object {
              "Fn::GetAtt": Array [
                "mediapipelineconcatBucketEB1E86A2",
                "Arn",
              ],
            },
            "MEETINGS_TABLE": Object {
              "Ref": "infrastructuremeetings3685B870",
            },
            "OUTPUT_TABLE": Object {
              "Ref": "mediapipelinemeetingsC35DE9B1",
            },
          },
        },
        "Handler": "index.lambdaHandler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "infrastructureinfrastructureRole7CDA6EE1",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "infrastructuremeetings3685B870": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "meetingId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "meetingId",
            "KeyType": "HASH",
          },
        ],
        "TimeToLiveSpecification": Object {
          "AttributeName": "timeToLive",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "mediapipelineMediaPipelineSLRBBA73712": Object {
      "Properties": Object {
        "AWSServiceName": "mediapipelines.chime.amazonaws.com",
      },
      "Type": "AWS::IAM::ServiceLinkedRole",
    },
    "mediapipelinecaptureBucket5A07E855": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": Array [
          Object {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "mediapipelinecaptureBucketAutoDeleteObjectsCustomResource5863E533": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "mediapipelinecaptureBucketPolicy755458DE",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "mediapipelinecaptureBucket5A07E855",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "mediapipelinecaptureBucketPolicy755458DE": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "mediapipelinecaptureBucket5A07E855",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "mediapipelinecaptureBucket5A07E855",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "mediapipelinecaptureBucket5A07E855",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:GetObject",
                "s3:ListBucket",
              ],
              "Condition": Object {
                "ArnLike": Object {
                  "aws:SourceArn": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:aws:chime:*:",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":*",
                      ],
                    ],
                  },
                },
                "StringEquals": Object {
                  "aws:SourceAccount": Object {
                    "Ref": "AWS::AccountId",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "mediapipelines.chime.amazonaws.com",
              },
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "mediapipelinecaptureBucket5A07E855",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "mediapipelinecaptureBucket5A07E855",
                    "Arn",
                  ],
                },
              ],
              "Sid": "AWSChimeMediaCaptureBucketPolicy",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "mediapipelinechimeSdkRuleAllowEventRuletestmediapipelineeventBridgeLambda9B9E2FBEF9D8C764": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "mediapipelineeventBridgeLambdaC8F77CF0",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "mediapipelinechimeSdkRuleD066C642",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "mediapipelinechimeSdkRuleD066C642": Object {
      "Properties": Object {
        "EventPattern": Object {
          "source": Array [
            "aws.chime",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "mediapipelineeventBridgeLambdaC8F77CF0",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "mediapipelineconcatBucketAllowBucketNotificationsTotestmediapipelinepostMeetingLambdaDAEE564DA3FEC15C": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "mediapipelinepostMeetingLambda9B3AF3F6",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": Object {
          "Ref": "AWS::AccountId",
        },
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "mediapipelineconcatBucketEB1E86A2",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "mediapipelineconcatBucketAutoDeleteObjectsCustomResourceC678615A": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "mediapipelineconcatBucketPolicy00738A34",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "mediapipelineconcatBucketEB1E86A2",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "mediapipelineconcatBucketEB1E86A2": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "CorsConfiguration": Object {
          "CorsRules": Array [
            Object {
              "AllowedHeaders": Array [
                "*",
              ],
              "AllowedMethods": Array [
                "GET",
              ],
              "AllowedOrigins": Array [
                "*",
              ],
              "ExposedHeaders": Array [
                "x-amz-server-side-encryption",
                "x-amz-security-token",
                "x-amz-request-id",
                "x-amz-id-2",
                "ETag",
              ],
              "MaxAge": 3000,
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": Array [
          Object {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "mediapipelineconcatBucketNotifications439A7E29": Object {
      "DependsOn": Array [
        "mediapipelineconcatBucketAllowBucketNotificationsTotestmediapipelinepostMeetingLambdaDAEE564DA3FEC15C",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "mediapipelineconcatBucketEB1E86A2",
        },
        "Managed": true,
        "NotificationConfiguration": Object {
          "LambdaFunctionConfigurations": Array [
            Object {
              "Events": Array [
                "s3:ObjectCreated:*",
              ],
              "LambdaFunctionArn": Object {
                "Fn::GetAtt": Array [
                  "mediapipelinepostMeetingLambda9B3AF3F6",
                  "Arn",
                ],
              },
            },
          ],
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "mediapipelineconcatBucketPolicy00738A34": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "mediapipelineconcatBucketEB1E86A2",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "mediapipelineconcatBucketEB1E86A2",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "mediapipelineconcatBucketEB1E86A2",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:PutObject",
                "s3:PutObjectAcl",
              ],
              "Condition": Object {
                "ArnLike": Object {
                  "aws:SourceArn": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:aws:chime:*:",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        ":*",
                      ],
                    ],
                  },
                },
                "StringEquals": Object {
                  "aws:SourceAccount": Object {
                    "Ref": "AWS::AccountId",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "mediapipelines.chime.amazonaws.com",
              },
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "mediapipelineconcatBucketEB1E86A2",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "mediapipelineconcatBucketEB1E86A2",
                    "Arn",
                  ],
                },
              ],
              "Sid": "AWSChimeMediaConcatBucketPolicy",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "mediapipelineeventBridgeLambdaC8F77CF0": Object {
      "DependsOn": Array [
        "mediapipelineeventBridgeLambdaRoleDefaultPolicy2A4DC06E",
        "mediapipelineeventBridgeLambdaRole2973F5FC",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "6db5b4b198eda243da1446280642ba13e610977ca98b3282774c92e69d269808.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "CAPTURE_BUCKET_ARN": Object {
              "Fn::GetAtt": Array [
                "mediapipelinecaptureBucket5A07E855",
                "Arn",
              ],
            },
            "CONCAT_BUCKET_ARN": Object {
              "Fn::GetAtt": Array [
                "mediapipelineconcatBucketEB1E86A2",
                "Arn",
              ],
            },
          },
        },
        "Handler": "index.lambdaHandler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "mediapipelineeventBridgeLambdaRole2973F5FC",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "mediapipelineeventBridgeLambdaRole2973F5FC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": "chime:*",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "chimePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "mediapipelineeventBridgeLambdaRoleDefaultPolicy2A4DC06E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "mediapipelinecaptureBucket5A07E855",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "mediapipelinecaptureBucket5A07E855",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "mediapipelineconcatBucketEB1E86A2",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "mediapipelineconcatBucketEB1E86A2",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "mediapipelineeventBridgeLambdaRoleDefaultPolicy2A4DC06E",
        "Roles": Array [
          Object {
            "Ref": "mediapipelineeventBridgeLambdaRole2973F5FC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "mediapipelinemeetingsC35DE9B1": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "mediaPipelineId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "mediaPipelineId",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "mediapipelinepostMeetingLambda9B3AF3F6": Object {
      "DependsOn": Array [
        "mediapipelinepostMeetingLambdaRoleDefaultPolicy633045CF",
        "mediapipelinepostMeetingLambdaRole73808075",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "6dea0d5f8e6e46f5f895e9434ab97802db88d27bcbc09b877caf8681976b6e15.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "CAPTURE_BUCKET_ARN": Object {
              "Fn::GetAtt": Array [
                "mediapipelinecaptureBucket5A07E855",
                "Arn",
              ],
            },
            "CONCAT_BUCKET_ARN": Object {
              "Fn::GetAtt": Array [
                "mediapipelineconcatBucketEB1E86A2",
                "Arn",
              ],
            },
            "OUTPUT_TABLE": Object {
              "Ref": "mediapipelinemeetingsC35DE9B1",
            },
          },
        },
        "Handler": "index.lambdaHandler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "mediapipelinepostMeetingLambdaRole73808075",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "mediapipelinepostMeetingLambdaRole73808075": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": "chime:*",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "chimePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "mediapipelinepostMeetingLambdaRoleDefaultPolicy633045CF": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "mediapipelinemeetingsC35DE9B1",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "mediapipelinepostMeetingLambdaRoleDefaultPolicy633045CF",
        "Roles": Array [
          Object {
            "Ref": "mediapipelinepostMeetingLambdaRole73808075",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
